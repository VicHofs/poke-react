{"version":3,"sources":["assets/loader.png","components/buttons/Dropdown.js","components/search/SearchPokemon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dropdown","props","flavorTexts","data","targetVer","entry","language","name","version","console","log","className","onChange","map","value","key","selected","Search","word","search","useState","setData","lang","ver","flavorVersion","setFlavorVersion","getPokemon","fetch","then","res","json","id","image","sprites","front_default","description","flavor_text_entries","catch","err","getDescription","error","useEffect","length","undefined","src","alt","formatId","string","includes","charAt","indexOf","slice","toUpperCase","titleCase","filter","flavor_text","replace","String","fromCharCode","e","selection","target","split","loader","App","typedSearch","setTypedSearch","type","placeholder","SearchPokemon","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","hydrate","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b498d482.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.b1413c19.png\";","import React from \"react\";\nimport \"./Dropdown.css\";\n\nexport default function Dropdown(props) {\n    let flavorTexts = props.data;\n    let targetVer = 'alpha_sapphire';\n    for (let entry of flavorTexts) {\n        if (entry.language.name === 'en') {\n            targetVer = entry.version.name;\n            break;\n        }\n    }\n    console.log('dropdown got: ', flavorTexts);\n    return(\n        <select className=\"listDrop\" onChange={props.onChange}>\n            {flavorTexts.map((entry) => <option className=\"listElement\" value={`${entry.language.name}—${entry.version.name}`} key={`${entry.language.name}—${entry.version.name}`} selected={entry.language.name === 'en' && entry.version.name === targetVer}>{entry.language.name} — {entry.version.name}</option>)}\n        </select>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport loader from '../../assets/loader.png';\nimport '../../App.css'\nimport Dropdown from '../buttons/Dropdown';\n\nfunction Search(word) {\n  let { search } = word;\n  const [data, setData] = useState([]);\n  const [flavorVersion, setFlavorVersion] = useState({lang: 'en', ver: 'alpha-sapphire'});\n  //const [description, setDescription] = useState(<p className=\"pokeData\">Checking the PokéDex...</p>);\n\n  const versionHandler = (selection) => {\n    console.log('event: ', selection);\n    selection = selection.split('—')\n    setFlavorVersion({\n      lang: selection[0],\n      ver: selection[1]\n    });\n    console.log('changed version from ', flavorVersion.lang, flavorVersion.ver);\n  }\n\n  const declutter = (string) => {\n    return string.replace(String.fromCharCode(12), ' ');\n  }\n\n  const titleCase = (string) => {\n    if (string !== undefined) {\n      if (string.includes('-') && string.charAt(string.indexOf('-')-1) !== 'o') {\n        string = string.slice(0,string.indexOf('-'));\n      }\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n  }\n\n  const formatId = (id) => {\n    if (id !== undefined) {\n      return '#' + id;\n    }\n  }\n\n  const getDescription = (json) => {\n    fetch(`https://pokeapi.co/api/v2/pokemon-species/${json.name}`)\n      .then(res => res.json())\n      .then(res => {\n        setData({\n          id: json.id,\n          name: json.name,\n          image: json.sprites.front_default,\n          description: res.flavor_text_entries\n        });\n        console.log(res);\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n  const getPokemon = (search) => {\n    fetch(`https://pokeapi.co/api/v2/pokemon/${search}`)\n      .then(res => res.json())\n      .then(json => {\n        setData({\n          id: json.id,\n          name: json.name,\n          image: json.sprites.front_default\n        });\n        getDescription(json)\n      })\n      .catch(function (error) {\n        console.log('aqui getpoke', error, data);\n      });\n  }\n\n  const renderData = () => {\n    if (data.length === 0) return <p className=\"noResult\">No PokéDex matches</p>;\n    if (data.description !== undefined) {\n      console.log('flavor data: ', data.description);\n      return (\n      <>\n        <td><img src={data.image} alt={data.name}></img></td>\n        <td><div className=\"divider\"></div></td>\n        <td className=\"pokeData\">{formatId(data.id)}</td>\n        <td><div className=\"divider\"></div></td>\n        <td className=\"pokeData\">\n          <div className=\"descriptionDiv\">\n            <p className=\"pokeDataTitle\">{titleCase(data.name)}</p>\n            <div className=\"spacer\"></div>\n            {data.description.filter((entry) => entry.language.name === flavorVersion.lang && entry.version.name === flavorVersion.ver).map(entry => <p className=\"pokeData\">{declutter(entry.flavor_text)}</p>)}\n          </div>\n        </td>\n\t\t<Dropdown data={data.description} onChange={(e) => versionHandler(e.target.value)}/>\n      </>\n    )\n    } \n    // else if (data !== undefined) {\n    //   return (\n    //   <>\n    //     <td><img src={data.image} alt={data.name}></img></td>\n    //     <td><div className=\"divider\"></div></td>\n    //     <td className=\"pokeData\">{formatId(data.id)}</td>\n    //     <td><div className=\"divider\"></div></td>\n    //     <td className=\"pokeData\">{titleCase(data.name)}</td>\n\t\t// <Dropdown data={data.description} />\n    //   </>)\n    // }\n    return <img className=\"loader\" src={loader} alt=\"loading...\"/>;\n  }\n\n\n  useEffect(() => {\n    getPokemon(search)\n    // eslint-disable-next-line\n  }, [search]);\n\n  return (\n\n    <table className=\"container\">\n      <tr>\n        {renderData()}\n      </tr>\n    </table>\n  )\n}\n\nexport default Search;\n","import React, { useState } from 'react';\n//import api from './services/api.js';\nimport { AiOutlineSearch } from 'react-icons/ai';\nimport './App.css';\nimport SearchPokemon from './components/search/SearchPokemon'\n\nfunction App() {\n  let [typedSearch, setTypedSearch] = useState(\"\");\n\n  return (\n    <div className=\"mainView\">\n      <header>\n        <h1>\n          PoKé React\n        </h1>\n      </header>\n      <div className=\"headerSpacer\"></div>\n      <div className=\"searchBar\">\n        <table className=\"container\">\n          <tr>\n            <td>\n              <input\n                type=\"text\"\n                placeholder=\"Got a favorite Pokémon?\"\n                className=\"searchBox\"\n                onChange={e => setTypedSearch(e.target.value)}\n              />\n            </td>\n            <td>\n              <AiOutlineSearch className=\"searchIcon\" />\n            </td>\n          </tr>\n        </table>\n      </div>\n      {typedSearch && <div className=\"searchResults\"><SearchPokemon search={typedSearch} /></div>}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.hydrate(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}